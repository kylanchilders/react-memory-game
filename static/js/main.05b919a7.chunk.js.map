{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","components/CharacterCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Title","CharacterCard","onClick","selectedCard","id","src","image","alt","goodGuessCount","App","state","Selected","selectedMatch","filter","Select","clicked","i","length","setState","sort","a","b","Math","random","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ivCAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCG1BC,MAJf,SAAeH,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAME,WCWvBE,G,MAZO,SAAAJ,GAAK,OACvB,yBAAKC,UAAU,OAAOI,QAAS,kBAAML,EAAMM,aAAaN,EAAMO,MAC5D,yBAAKN,UAAU,iBACb,yBACEO,IAAKR,EAAMS,MACXC,IAAKV,EAAMO,S,OCFjBI,EAAiB,EAiENC,E,2MA7DbC,MAAQ,CACNF,iBACAG,Y,EAGFR,aAAe,SAAAC,GAEb,IAAMO,EAAW,EAAKD,MAAMC,SACtBC,EAAgBD,EAASE,QAAO,SAAAC,GAAM,OAAIA,EAAOV,KAAOA,KAE9D,GAAGQ,EAAc,GAAGG,QAAQ,CAC1BP,EAAiB,EAEjB,IAAK,IAAIQ,EAAE,EAAGA,EAAIL,EAASM,OAAQD,IACjCL,EAASK,GAAGD,SAAU,EAG1B,EAAKG,SAAS,CAAEV,mBAChB,EAAKU,SAAS,CAAEP,kBAEV,GAAIH,EAAiB,GAEzBI,EAAc,GAAGG,SAAU,EAC3BP,IAEAG,EAASQ,MAAK,SAAUC,EAAGC,GAAK,MAAO,GAAMC,KAAKC,YAElD,EAAKL,SAAS,CAAEP,aAChB,EAAKO,SAAS,CAAEV,uBACb,CAEHI,EAAc,GAAGG,SAAU,EAC3BP,EAAiB,EAEjB,IAAK,IAAIQ,EAAE,EAAGA,EAAIL,EAASM,OAAQD,IACjCL,EAASK,GAAGD,SAAU,I,wEAKpB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,0BACA,gDACsBS,KAAKd,MAAMF,gBAEjC,6BACCgB,KAAKd,MAAMC,SAASc,KAAI,SAAAX,GAAM,OACvB,kBAAC,EAAD,CACEX,aAAc,EAAKA,aACnBC,GAAIU,EAAOV,GACXsB,IAAKZ,EAAOV,GACZE,MAAOQ,EAAOR,gB,GAvDZqB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.05b919a7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst CharacterCard = props => (\n    <div className=\"card\" onClick={() => props.selectedCard(props.id)} >\n      <div className=\"img-container\">\n        <img\n          src={props.image}\n          alt={props.id}\n        />\n      </div>\n    </div>\n  );\n\n\nexport default CharacterCard;\n","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Selected from \"./images.json\";\n\nvar goodGuessCount = 0;\n\nclass App extends Component {\n\n  state = {\n    goodGuessCount,\n    Selected\n  };\n\n  selectedCard = id => {\n    \n    const Selected = this.state.Selected;\n    const selectedMatch = Selected.filter(Select => Select.id === id);\n\n    if(selectedMatch[0].clicked){\n      goodGuessCount = 0;\n\n      for (let i=0; i < Selected.length; i++){\n        Selected[i].clicked = false;\n      }\n    \n    this.setState({ goodGuessCount });\n    this.setState({ Selected });\n\n    }else if (goodGuessCount < 15){\n\n      selectedMatch[0].clicked = true;\n      goodGuessCount++\n\n      Selected.sort(function (a, b) { return 0.5 - Math.random() });\n\n      this.setState({ Selected });\n      this.setState({ goodGuessCount });\n    }else{\n\n      selectedMatch[0].clicked = true;\n      goodGuessCount = 0;\n\n      for (let i=0; i < Selected.length; i++){\n        Selected[i].clicked = false;\n      }\n    }\n  }\n\nrender() {\n  return (\n    <Wrapper>\n      <Title>Memory Match Game</Title>\n      <h3>\n          Correct Guesses: {this.state.goodGuessCount}\n      </h3>\n      <br></br>\n      {this.state.Selected.map(Select => (\n              <CharacterCard\n                selectedCard={this.selectedCard}\n                id={Select.id}\n                key={Select.id}\n                image={Select.image}\n              />\n            ))}\n    </Wrapper>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}